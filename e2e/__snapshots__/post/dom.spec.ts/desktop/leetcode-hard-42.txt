<main class="post-layout"><div class="nav-loading"><progress value="4403" max="1"></progress></div><nav class="nav flex-wrap water-rainbow post-nav-trans nav-shadow"><h2 class="tracking-tight focus:text-gray-700 text-2xl font-bold mt-2 mb-2 ml-3.5"><a class="hover-underline" href="/">1ilsang</a></h2><div class="flex"><h2 class="tracking-tight focus:text-gray-700 text-xl mt-2.5 mr-6"><a class="hover-underline" href="/posts">posts</a></h2><h2 class="tracking-tight focus:text-gray-700 text-xl mt-2.5 mr-6"><a class="hover-underline" href="/tags">tags</a></h2><div class="rounded-full mr-2 relative nav-avatar"><a href="/about"><img src="/assets/chul.png" alt="1ilsang"></a></div></div></nav><div class="post-container"><h1 class="post-header">[LeetCode] 42. Trapping Rain Water</h1><div class="post-profile-container"><div class="flex items-center"><div class="rounded-full mr-2 relative avatar-image"><a href="/about"><img src="/assets/chul.png" alt="1ilsang"></a></div><div><a class="avatar-name" href="/about">1ilsang</a><div class="avatar-description">클라이밍 하실래염?</div></div></div></div><div class="flex flex-wrap mt-2 items-end"><a class="hashtag mr-2" target="_self" href="/tags/algorithm">#<!-- -->algorithm</a><a class="hashtag mr-2" target="_self" href="/tags/leetcode">#<!-- -->leetcode</a><a class="hashtag mr-2" target="_self" href="/tags/hard">#<!-- -->hard</a><a class="hashtag mr-2" target="_self" href="/tags/stack">#<!-- -->stack</a><a class="hashtag mr-2" target="_self" href="/tags/two-pointers">#<!-- -->two-pointers</a></div><div class="date-published"><time class="date-format" datetime="2023-10-14 17:10">2023-10-14 17:10</time> published</div><div class="post-body-container"><div class="markdown"><p></p><div class="img-wrap"><img src="https://github.com/1ilsang/dev/assets/23524849/59fc8404-8da9-451c-bf9b-36c33e60e97a" alt="cover" class="cover"></div><p></p>
<blockquote>
<p><a target="_blank" href="https://leetcode.com/problems/trapping-rain-water" rel="noreferrer noopener">문제 링크</a></p>
</blockquote>
<p>빗물이 고일 수 있는 모든 영역을 구하면 되는 문제다.</p>
<p>기본적으로 물은 '높은 곳에서 낮은 곳'으로 흐르기 때문에 우리는 높이를 비교하면서 빗물이 고일 수 있는지 판단해야 한다.</p>
<p>이 문제는 두 가지 스택과 투포인터 두 가지로 풀 수 있다. 두 방법 모두 알아두면 좋기 때문에 두 가지 해석을 모두 하려고 한다.</p>
<h2 id="접근법-1-stack-on-tn" data-heading="true"><a data-heading="true" href="#접근법-1-stack-on-tn"><span class="icon icon-link"></span></a>접근법 1. Stack O(n) T(n)</h2>
<p>스택 접근은 <u>"가로로 면적을 합해가는"</u> 방식이다.</p>
<p>빗물이 고이기 위해서는 양쪽으로 벽이 있어야 한다.</p>
<p>스택을 활용해 양 벽을 계산하는 방법은, 높이가 감소할 때는 스택에 푸쉬하고 높이가 이전 탑보다 높아질 때는 팝을 하면서 얼마만큼의 빗물을 저장할 수 있는지 계산하면 된다.</p>
<p></p><div class="img-wrap"><img src="https://github.com/1ilsang/dev/assets/23524849/fbb24919-41e2-4ff7-9a66-876b590d0c79" alt="example"></div><p></p>
<p>0번째 높이부터 순회해 보자.</p>
<ol>
<li>모든 원소를 순회할 때마다 스택에 푸쉬한다. 왼쪽의 그림과 같이 높이가 감소해 나갈 때에는 특별한 작업 없이 계속 진행한다.</li>
<li>중앙의 그림(<code>i = 3</code>)의 상황일 경우 현재 벽이 스택의 Top 값보다 더 높기 때문에 빗물이 고일 수 있다. 현재 높이와 같거나 클 때까지 스택에 쌓여있는 벽들을 pop 하며 "가로로" 누적값을 더한다. 여기서는 높이 1이 최대이므로 스택에 추가된 높이 2(<code>i = 0</code>)까지 계산하지 않고 끝난다.</li>
<li>우측의 그림(<code>i = 4</code>)에서도 동일하다. 현재 높이보다 큰 높이가 나올 때까지 팝을 하며 계산한다. 2번에서 이미 높이 1일 때의 경우를 계산했으므로 높이 2일 때의 가로 값만 계산하면 된다.</li>
</ol>
<p>마지막 노드까지 위의 방식을 계속해서 하면 모든 면적을 구할 수 있다. 코드와 라인별 해석은 제일 아래에 작성해 두었다.</p>
<h2 id="접근법-2-two-pointers-on-t1" data-heading="true"><a data-heading="true" href="#접근법-2-two-pointers-on-t1"><span class="icon icon-link"></span></a>접근법 2. Two Pointers O(n) T(1)</h2>
<p>투포인터 접근은 <u>"세로로 면적을 합해가는"</u> 방식이다.</p>
<p>빗물이 고이기 위해서는 양쪽으로 벽이 있어야 한다.</p>
<p>투포인터는 양끝에 포인터를 설정하고 좌우로 움직이며 높이가 더 높은 쪽을 향해 간다. 높이가 높은 쪽을 향해 양 포인터를 옮기면 반대로 낮은 쪽은 빗물이 고이는 곳이기 때문에 세로로 더해나가면 된다.</p>
<p></p><div class="img-wrap"><img src="https://github.com/1ilsang/dev/assets/23524849/57196d71-ccc4-480a-bef3-b9d34df762e2" alt="example"></div><p></p>
<p>L, R을 양 끝에 두고 순회하면서 각각 MAX 값을 구한다.</p>
<ol>
<li>최초의 상태. 최대값(가로선)을 설정한다.</li>
<li><code>L &lt; R</code>이라면 L을 옮기고 아니면 R을 옮긴다. 여기는 L를 옮겼다. <code>i = 1</code>의 높이가 L의 최대높이보다 낮으므로 그 차이를 더한다.</li>
<li><code>L &lt; R</code>일 때까지 L을 옮긴 모습이다.</li>
<li>R을 옮겼다. <code>i = 8</code>의 높이가 R의 최대높이보다 낮으므로 그 차이를 더한다.</li>
<li>계속해서 반복하면 결국 LR은 한곳으로 모이고 그 사이의 모든 세로 값이 더해져 빗물의 면적을 구할 수 있다.</li>
</ol>
<h2 id="최종-코드" data-heading="true"><a data-heading="true" href="#최종-코드"><span class="icon icon-link"></span></a>최종 코드</h2>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="js" data-theme="material-theme-palenight"><code data-language="js" data-theme="material-theme-palenight" style="display: grid;"><span data-line=""><span style="color:#676E95;font-style:italic">// Stack</span></span>
<span data-line=""><span style="color:#C792EA">const</span><span style="color:#BABED8"> trap </span><span style="color:#89DDFF">=</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">height</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =&gt;</span><span style="color:#89DDFF"> {</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> res</span><span style="color:#89DDFF"> =</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> i</span><span style="color:#89DDFF"> =</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">  const</span><span style="color:#BABED8"> stack</span><span style="color:#89DDFF"> =</span><span style="color:#F07178"> []</span><span style="color:#89DDFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">  while</span><span style="color:#F07178"> (</span><span style="color:#BABED8">i</span><span style="color:#89DDFF"> &lt;</span><span style="color:#BABED8"> height</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">length</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span data-line=""><span style="color:#C792EA">    const</span><span style="color:#BABED8"> curHeight</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> height</span><span style="color:#F07178">[</span><span style="color:#BABED8">i</span><span style="color:#F07178">]</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">    // 현재 높이가 스택의 마지막 높이보다 높다면</span></span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">    while</span><span style="color:#F07178"> (</span><span style="color:#BABED8">stack</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">length</span><span style="color:#89DDFF"> &gt;</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF"> &amp;&amp;</span><span style="color:#BABED8"> height</span><span style="color:#F07178">[</span><span style="color:#BABED8">stack</span><span style="color:#F07178">[</span><span style="color:#BABED8">stack</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">length</span><span style="color:#89DDFF"> -</span><span style="color:#F78C6C"> 1</span><span style="color:#F07178">]] </span><span style="color:#89DDFF">&lt;</span><span style="color:#BABED8"> curHeight</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span data-line=""><span style="color:#C792EA">      const</span><span style="color:#BABED8"> lastI</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> stack</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">pop</span><span style="color:#F07178">()</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">      // 스택이 비었다는 의미는 자신뿐이므로 빗물이 고일 수 없기 때문에 탈출한다.</span></span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">      if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">stack</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">length</span><span style="color:#89DDFF"> ===</span><span style="color:#F78C6C"> 0</span><span style="color:#F07178">) </span><span style="color:#89DDFF;font-style:italic">break</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">      const</span><span style="color:#BABED8"> peekI</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> stack</span><span style="color:#F07178">[</span><span style="color:#BABED8">stack</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">length</span><span style="color:#89DDFF"> -</span><span style="color:#F78C6C"> 1</span><span style="color:#F07178">]</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">      // 현재 위치(i)와 스택의 다음 위치(peekI)의 거리를 구한다.</span></span>
<span data-line=""><span style="color:#C792EA">      const</span><span style="color:#BABED8"> dist</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> i</span><span style="color:#89DDFF"> -</span><span style="color:#BABED8"> peekI</span><span style="color:#89DDFF"> -</span><span style="color:#F78C6C"> 1</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">      // 현재 위치의 높이와 스택의 다음 위치 높이중 낮은 값을 기준으로 스택의 마지막 높이를 뺀다.</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">      // 마지막 높이만큼은 빗물이 고일 수 없기 때문</span></span>
<span data-line=""><span style="color:#C792EA">      const</span><span style="color:#BABED8"> h</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> Math</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">min</span><span style="color:#F07178">(</span><span style="color:#BABED8">curHeight</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> height</span><span style="color:#F07178">[</span><span style="color:#BABED8">peekI</span><span style="color:#F07178">]) </span><span style="color:#89DDFF">-</span><span style="color:#BABED8"> height</span><span style="color:#F07178">[</span><span style="color:#BABED8">lastI</span><span style="color:#F07178">]</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#BABED8">      res</span><span style="color:#89DDFF"> +=</span><span style="color:#BABED8"> dist</span><span style="color:#89DDFF"> *</span><span style="color:#BABED8"> h</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#89DDFF">    }</span></span>
<span data-line=""><span style="color:#BABED8">    stack</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">push</span><span style="color:#F07178">(</span><span style="color:#BABED8">i</span><span style="color:#89DDFF">++</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#89DDFF">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> res</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#89DDFF">};</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><pre tabindex="0" data-language="js" data-theme="material-theme-palenight"><code data-language="js" data-theme="material-theme-palenight" style="display: grid;"><span data-line=""><span style="color:#676E95;font-style:italic">// Two-pointers</span></span>
<span data-line=""><span style="color:#C792EA">const</span><span style="color:#BABED8"> trap </span><span style="color:#89DDFF">=</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">height</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =&gt;</span><span style="color:#89DDFF"> {</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> res</span><span style="color:#89DDFF"> =</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> l</span><span style="color:#89DDFF"> =</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> r</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> height</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">length</span><span style="color:#89DDFF"> -</span><span style="color:#F78C6C"> 1</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> lMax</span><span style="color:#89DDFF"> =</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">  let</span><span style="color:#BABED8"> rMax</span><span style="color:#89DDFF"> =</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">  while</span><span style="color:#F07178"> (</span><span style="color:#BABED8">l</span><span style="color:#89DDFF"> &lt;</span><span style="color:#BABED8"> r</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span data-line=""><span style="color:#C792EA">    const</span><span style="color:#BABED8"> curLeft</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> height</span><span style="color:#F07178">[</span><span style="color:#BABED8">l</span><span style="color:#F07178">]</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#C792EA">    const</span><span style="color:#BABED8"> curRight</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> height</span><span style="color:#F07178">[</span><span style="color:#BABED8">r</span><span style="color:#F07178">]</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">    // 매번 max 값을 갱신한다. 그래야 자신이 줄어든 값인지 비교할 수 있다.</span></span>
<span data-line=""><span style="color:#BABED8">    lMax</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> Math</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">max</span><span style="color:#F07178">(</span><span style="color:#BABED8">curLeft</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> lMax</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#BABED8">    rMax</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> Math</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">max</span><span style="color:#F07178">(</span><span style="color:#BABED8">curRight</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> rMax</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#676E95;font-style:italic">    // 현재 높이가 최대값 보다 적다면 고일 수 있으므로 추가한다.</span></span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">curLeft</span><span style="color:#89DDFF"> &lt;</span><span style="color:#BABED8"> lMax</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span data-line=""><span style="color:#BABED8">      res</span><span style="color:#89DDFF"> +=</span><span style="color:#BABED8"> lMax</span><span style="color:#89DDFF"> -</span><span style="color:#BABED8"> curLeft</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#89DDFF">    }</span></span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">curRight</span><span style="color:#89DDFF"> &lt;</span><span style="color:#BABED8"> rMax</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span data-line=""><span style="color:#BABED8">      res</span><span style="color:#89DDFF"> +=</span><span style="color:#BABED8"> rMax</span><span style="color:#89DDFF"> -</span><span style="color:#BABED8"> curRight</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#89DDFF">    }</span></span>
<span data-line=""><span style="color:#676E95;font-style:italic">    // 양쪽의 포인터를 비교해서 높이가 더 큰 방향으로 이동한다.</span></span>
<span data-line=""><span style="color:#BABED8">    curLeft</span><span style="color:#89DDFF"> &lt;</span><span style="color:#BABED8"> curRight</span><span style="color:#89DDFF"> ?</span><span style="color:#BABED8"> l</span><span style="color:#89DDFF">++</span><span style="color:#89DDFF"> :</span><span style="color:#BABED8"> r</span><span style="color:#89DDFF">--;</span></span>
<span data-line=""><span style="color:#89DDFF">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> res</span><span style="color:#89DDFF">;</span></span>
<span data-line=""><span style="color:#89DDFF">};</span></span></code></pre></figure></div><aside class="floating-container"><ul class="list"><li data-id="접근법-1-stack-on-tn" class="item">접근법 1. Stack O(n) T(n)</li><li data-id="접근법-2-two-pointers-on-t1" class="item">접근법 2. Two Pointers O(n) T(1)</li><li data-id="최종-코드" class="item">최종 코드</li></ul></aside></div><a class="highlighter issue-post" href="https://github.com/1ilsang/dev/issues/new?labels=\uD83E\uDDCA comment&amp;assignees=1ilsang&amp;title=[🧊] %5BLeetCode%5D%2042.%20Trapping%20Rain%20Water&amp;body=<!-- 환영합니다. 이슈 남겨주시면 빠르게 답변드리겠습니다. 🙇 -->" rel="noopener noreferrer" target="_blank">📮 이 포스트에 관심 있으신가요? 이슈를 남겨주세요! 👍</a></div><footer class="footer"><ul><li><a href="/about">1ilsang</a></li><li><a rel="noopener noreferrer" target="_blank" href="https://github.com/1ilsang">GitHub</a></li><li><a href="https://www.linkedin.com/in/sang-chul-lee-91a32b154/" rel="noopener noreferrer" target="_blank">LinkedIn</a></li></ul></footer></main>